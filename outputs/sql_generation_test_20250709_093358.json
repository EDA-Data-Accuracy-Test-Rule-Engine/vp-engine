{
  "test_timestamp": "20250709_093358",
  "total_rules": 5,
  "successful_generations": 5,
  "results": [
    {
      "rule_name": "Rule Type 1 - Value Range",
      "rule_type": "value_range",
      "status": "SUCCESS",
      "sql": "-- Rule: Rule Type 1 - Value Range\n-- Description: Validate that amount_usd values are within range [100, 10000]\nSELECT \n    'Rule Type 1 - Value Range' as rule_name,\n    COUNT(*) as total_rows,\n    SUM(CASE WHEN (amount_usd < 100 OR amount_usd > 10000) THEN 1 ELSE 0 END) as failed_rows,\n    COUNT(*) - SUM(CASE WHEN (amount_usd < 100 OR amount_usd > 10000) THEN 1 ELSE 0 END) as passed_rows,\n    CASE \n        WHEN SUM(CASE WHEN (amount_usd < 100 OR amount_usd > 10000) THEN 1 ELSE 0 END) = 0 THEN 'PASS'\n        ELSE 'FAIL'\n    END as status\nFROM public.transactions\nWHERE amount_usd IS NOT NULL;"
    },
    {
      "rule_name": "Rule Type 2 - Email Template",
      "rule_type": "value_template",
      "status": "SUCCESS",
      "sql": "-- Rule: Rule Type 2 - Email Template\n-- Description: Validate that email values match pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\nSELECT \n    'Rule Type 2 - Email Template' as rule_name,\n    COUNT(*) as total_rows,\n    SUM(CASE WHEN (email !~ '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') THEN 1 ELSE 0 END) as failed_rows,\n    COUNT(*) - SUM(CASE WHEN (email !~ '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') THEN 1 ELSE 0 END) as passed_rows,\n    CASE \n        WHEN SUM(CASE WHEN (email !~ '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') THEN 1 ELSE 0 END) = 0 THEN 'PASS'\n        ELSE 'FAIL'\n    END as status\nFROM public.customers\nWHERE email IS NOT NULL;"
    },
    {
      "rule_name": "Rule Type 3 - Data Continuity",
      "rule_type": "data_continuity",
      "status": "SUCCESS",
      "sql": "-- Rule: Rule Type 3 - Data Continuity\n-- Description: Validate incremental sequence in id\nWITH sequence_check AS (\n    SELECT \n        id,\n        LAG(id) OVER (ORDER BY id) as prev_value,\n        ROW_NUMBER() OVER (ORDER BY id) as expected_sequence\n    FROM public.employees\n    WHERE id IS NOT NULL\n),\ngaps AS (\n    SELECT COUNT(*) as gap_count\n    FROM sequence_check\n    WHERE id != prev_value + 1 AND prev_value IS NOT NULL\n)\nSELECT \n    'Rule Type 3 - Data Continuity' as rule_name,\n    (SELECT COUNT(*) FROM public.employees) as total_rows,\n    (SELECT gap_count FROM gaps) as failed_rows,\n    (SELECT COUNT(*) FROM public.employees) - (SELECT gap_count FROM gaps) as passed_rows,\n    CASE \n        WHEN (SELECT gap_count FROM gaps) = 0 THEN 'PASS'\n        ELSE 'FAIL'\n    END as status;"
    },
    {
      "rule_name": "Rule Type 4 - Same Statistical Comparison",
      "rule_type": "same_statistical_comparison",
      "status": "SUCCESS",
      "sql": "-- Rule: Rule Type 4 - Same Statistical Comparison\n-- Description: Compare COUNT_DISTINCT(branch_code) from public.table_a = COUNT_DISTINCT(branch_code) from public.table_b\nWITH stats1 AS (\n    SELECT COUNT_DISTINCT(branch_code) as stat_value\n    FROM public.table_a\n    \n),\nstats2 AS (\n    SELECT COUNT_DISTINCT(branch_code) as stat_value\n    FROM public.table_b\n    \n),\ncomparison AS (\n    SELECT \n        s1.stat_value as table1_stat,\n        s2.stat_value as table2_stat,\n        CASE \n            WHEN s1.stat_value = s2.stat_value THEN 'PASS'\n            ELSE 'FAIL'\n        END as status\n    FROM stats1 s1, stats2 s2\n)\nSELECT \n    'Rule Type 4 - Same Statistical Comparison' as rule_name,\n    1 as total_rows,\n    CASE WHEN status = 'FAIL' THEN 1 ELSE 0 END as failed_rows,\n    CASE WHEN status = 'PASS' THEN 1 ELSE 0 END as passed_rows,\n    status,\n    table1_stat,\n    table2_stat\nFROM comparison;"
    },
    {
      "rule_name": "Rule Type 5 - Different Statistical Comparison",
      "rule_type": "different_statistical_comparison",
      "status": "SUCCESS",
      "sql": "-- Rule: Rule Type 5 - Different Statistical Comparison\n-- Description: Compare SUM(overdue_principal_payment+overdue_principal_penalty+overdue_interest_payment+overdue_interest_penalty) from public.overdue_loan_payments = SUM(repayment_amount) from public.transaction_summary\nWITH stats1 AS (\n    SELECT (SUM(overdue_principal_payment) + SUM(overdue_principal_penalty) + SUM(overdue_interest_payment) + SUM(overdue_interest_penalty)) as stat_value\n    FROM public.overdue_loan_payments\n    WHERE contract_nbr IS NOT NULL\n),\nstats2 AS (\n    SELECT SUM(repayment_amount) as stat_value\n    FROM public.transaction_summary\n    WHERE contract_nbr IS NOT NULL\n),\ncomparison AS (\n    SELECT \n        s1.stat_value as table1_stat,\n        s2.stat_value as table2_stat,\n        CASE \n            WHEN s1.stat_value = s2.stat_value THEN 'PASS'\n            ELSE 'FAIL'\n        END as status\n    FROM stats1 s1, stats2 s2\n)\nSELECT \n    'Rule Type 5 - Different Statistical Comparison' as rule_name,\n    1 as total_rows,\n    CASE WHEN status = 'FAIL' THEN 1 ELSE 0 END as failed_rows,\n    CASE WHEN status = 'PASS' THEN 1 ELSE 0 END as passed_rows,\n    status,\n    table1_stat,\n    table2_stat\nFROM comparison;"
    }
  ]
}