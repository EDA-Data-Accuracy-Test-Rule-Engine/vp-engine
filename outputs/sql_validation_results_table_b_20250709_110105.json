{
  "table_name": "table_b",
  "generation_timestamp": "20250709_110105",
  "total_rules": 8,
  "results": [
    {
      "rule_name": "Transaction Amount Range Check",
      "status": "ERROR",
      "total_rows": 0,
      "failed_rows": 0,
      "passed_rows": 0,
      "error_message": "(psycopg2.errors.UndefinedColumn) column \"amount_usd\" does not exist\nLINE 4:     SUM(CASE WHEN (amount_usd < 100 OR amount_usd > 10000) T...\n                           ^\n\n[SQL: SELECT \n    'Transaction Amount Range Check' as rule_name,\n    COUNT(*) as total_rows,\n    SUM(CASE WHEN (amount_usd < 100 OR amount_usd > 10000) THEN 1 ELSE 0 END) as failed_rows,\n    COUNT(*) - SUM(CASE WHEN (amount_usd < 100 OR amount_usd > 10000) THEN 1 ELSE 0 END) as passed_rows,\n    CASE \n        WHEN SUM(CASE WHEN (amount_usd < 100 OR amount_usd > 10000) THEN 1 ELSE 0 END) = 0 THEN 'PASS'\n        ELSE 'FAIL'\n    END as status\nFROM table_b\nWHERE amount_usd IS NOT NULL;]\n(Background on this error at: https://sqlalche.me/e/20/f405)",
      "generated_sql": null
    },
    {
      "rule_name": "Customer Email Format Validation",
      "status": "ERROR",
      "total_rows": 0,
      "failed_rows": 0,
      "passed_rows": 0,
      "error_message": "(psycopg2.errors.UndefinedColumn) column \"email\" does not exist\nLINE 4:     SUM(CASE WHEN (email !~ '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-...\n                           ^\n\n[SQL: SELECT \n    'Customer Email Format Validation' as rule_name,\n    COUNT(*) as total_rows,\n    SUM(CASE WHEN (email !~ '^[a-zA-Z0-9._%%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') THEN 1 ELSE 0 END) as failed_rows,\n    COUNT(*) - SUM(CASE WHEN (email !~ '^[a-zA-Z0-9._%%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') THEN 1 ELSE 0 END) as passed_rows,\n    CASE \n        WHEN SUM(CASE WHEN (email !~ '^[a-zA-Z0-9._%%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') THEN 1 ELSE 0 END) = 0 THEN 'PASS'\n        ELSE 'FAIL'\n    END as status\nFROM table_b\nWHERE email IS NOT NULL;]\n(Background on this error at: https://sqlalche.me/e/20/f405)",
      "generated_sql": null
    },
    {
      "rule_name": "Phone Number Format (Vietnam)",
      "status": "ERROR",
      "total_rows": 0,
      "failed_rows": 0,
      "passed_rows": 0,
      "error_message": "(psycopg2.errors.UndefinedColumn) column \"phone\" does not exist\nLINE 4:     SUM(CASE WHEN (phone !~ '^(\\+84\\s?\\d{9,10}|0\\d{9,10})$')...\n                           ^\n\n[SQL: SELECT \n    'Phone Number Format (Vietnam)' as rule_name,\n    COUNT(*) as total_rows,\n    SUM(CASE WHEN (phone !~ '^(\\+84\\s?\\d{9,10}|0\\d{9,10})$') THEN 1 ELSE 0 END) as failed_rows,\n    COUNT(*) - SUM(CASE WHEN (phone !~ '^(\\+84\\s?\\d{9,10}|0\\d{9,10})$') THEN 1 ELSE 0 END) as passed_rows,\n    CASE \n        WHEN SUM(CASE WHEN (phone !~ '^(\\+84\\s?\\d{9,10}|0\\d{9,10})$') THEN 1 ELSE 0 END) = 0 THEN 'PASS'\n        ELSE 'FAIL'\n    END as status\nFROM table_b\nWHERE phone IS NOT NULL;]\n(Background on this error at: https://sqlalche.me/e/20/f405)",
      "generated_sql": null
    },
    {
      "rule_name": "Employee ID Sequence Check",
      "status": "PASS",
      "total_rows": 5,
      "failed_rows": 0,
      "passed_rows": 5,
      "error_message": null,
      "generated_sql": "WITH sequence_check AS (\n    SELECT \n        id,\n        LAG(id) OVER (ORDER BY id) as prev_value,\n        ROW_NUMBER() OVER (ORDER BY id) as expected_sequence\n    FROM table_b\n    WHERE id IS NOT NULL\n),\ngaps AS (\n    SELECT COUNT(*) as gap_count\n    FROM sequence_check\n    WHERE id != prev_value + 1 AND prev_value IS NOT NULL\n)\nSELECT \n    'Employee ID Sequence Check' as rule_name,\n    (SELECT COUNT(*) FROM table_b) as total_rows,\n    (SELECT gap_count FROM gaps) as failed_rows,\n    (SELECT COUNT(*) FROM table_b) - (SELECT gap_count FROM gaps) as passed_rows,\n    CASE \n        WHEN (SELECT gap_count FROM gaps) = 0 THEN 'PASS'\n        ELSE 'FAIL'\n    END as status;"
    },
    {
      "rule_name": "Branch Code Consistency Check",
      "status": "PASS",
      "total_rows": 1,
      "failed_rows": 0,
      "passed_rows": 1,
      "error_message": null,
      "generated_sql": "WITH stats1 AS (\n    SELECT COUNT(DISTINCT branch_code) as stat_value\n    FROM public.table_a\n    \n),\nstats2 AS (\n    SELECT COUNT(DISTINCT branch_code) as stat_value\n    FROM public.table_b\n    \n),\ncomparison AS (\n    SELECT \n        s1.stat_value as table1_stat,\n        s2.stat_value as table2_stat,\n        CASE \n            WHEN s1.stat_value = s2.stat_value THEN 'PASS'\n            ELSE 'FAIL'\n        END as status\n    FROM stats1 s1, stats2 s2\n)\nSELECT \n    'Branch Code Consistency Check' as rule_name,\n    1 as total_rows,\n    CASE WHEN status = 'FAIL' THEN 1 ELSE 0 END as failed_rows,\n    CASE WHEN status = 'PASS' THEN 1 ELSE 0 END as passed_rows,\n    status,\n    table1_stat,\n    table2_stat\nFROM comparison;"
    },
    {
      "rule_name": "Loan Repayment Total Validation",
      "status": "FAIL",
      "total_rows": 1,
      "failed_rows": 1,
      "passed_rows": 0,
      "error_message": null,
      "generated_sql": "WITH stats1 AS (\n    SELECT (SUM(overdue_principal_payment) + SUM(overdue_principal_penalty) + SUM(overdue_interest_payment) + SUM(overdue_interest_penalty)) as stat_value\n    FROM public.overdue_loan_payments\n    WHERE contract_nbr IS NOT NULL\n),\nstats2 AS (\n    SELECT SUM(repayment_amount) as stat_value\n    FROM public.transaction_summary\n    WHERE contract_nbr IS NOT NULL\n),\ncomparison AS (\n    SELECT \n        s1.stat_value as table1_stat,\n        s2.stat_value as table2_stat,\n        CASE \n            WHEN s1.stat_value = s2.stat_value THEN 'PASS'\n            ELSE 'FAIL'\n        END as status\n    FROM stats1 s1, stats2 s2\n)\nSELECT \n    'Loan Repayment Total Validation' as rule_name,\n    1 as total_rows,\n    CASE WHEN status = 'FAIL' THEN 1 ELSE 0 END as failed_rows,\n    CASE WHEN status = 'PASS' THEN 1 ELSE 0 END as passed_rows,\n    status,\n    table1_stat,\n    table2_stat\nFROM comparison;"
    },
    {
      "rule_name": "Customer Age Range Check",
      "status": "ERROR",
      "total_rows": 0,
      "failed_rows": 0,
      "passed_rows": 0,
      "error_message": "(psycopg2.errors.UndefinedColumn) column \"age\" does not exist\nLINE 4:     SUM(CASE WHEN (age < 18 OR age > 100) THEN 1 ELSE 0 END)...\n                           ^\n\n[SQL: SELECT \n    'Customer Age Range Check' as rule_name,\n    COUNT(*) as total_rows,\n    SUM(CASE WHEN (age < 18 OR age > 100) THEN 1 ELSE 0 END) as failed_rows,\n    COUNT(*) - SUM(CASE WHEN (age < 18 OR age > 100) THEN 1 ELSE 0 END) as passed_rows,\n    CASE \n        WHEN SUM(CASE WHEN (age < 18 OR age > 100) THEN 1 ELSE 0 END) = 0 THEN 'PASS'\n        ELSE 'FAIL'\n    END as status\nFROM table_b\nWHERE age IS NOT NULL;]\n(Background on this error at: https://sqlalche.me/e/20/f405)",
      "generated_sql": null
    },
    {
      "rule_name": "Employee Code Format Check",
      "status": "ERROR",
      "total_rows": 0,
      "failed_rows": 0,
      "passed_rows": 0,
      "error_message": "(psycopg2.errors.UndefinedColumn) column \"employee_code\" does not exist\nLINE 4:     SUM(CASE WHEN (employee_code !~ '^EMP-\\d{5}$') THEN 1 EL...\n                           ^\n\n[SQL: SELECT \n    'Employee Code Format Check' as rule_name,\n    COUNT(*) as total_rows,\n    SUM(CASE WHEN (employee_code !~ '^EMP-\\d{5}$') THEN 1 ELSE 0 END) as failed_rows,\n    COUNT(*) - SUM(CASE WHEN (employee_code !~ '^EMP-\\d{5}$') THEN 1 ELSE 0 END) as passed_rows,\n    CASE \n        WHEN SUM(CASE WHEN (employee_code !~ '^EMP-\\d{5}$') THEN 1 ELSE 0 END) = 0 THEN 'PASS'\n        ELSE 'FAIL'\n    END as status\nFROM table_b\nWHERE employee_code IS NOT NULL;]\n(Background on this error at: https://sqlalche.me/e/20/f405)",
      "generated_sql": null
    }
  ]
}